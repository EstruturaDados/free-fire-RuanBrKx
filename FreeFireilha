#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h> // Para usar o tipo 'bool'

// --- Constantes ---
#define MAX_ITENS 50
#define MAX_NOME 50
#define MAX_TIPO 30

typedef struct {
    char nome[MAX_NOME];
    char tipo[MAX_TIPO];
    int quantidade;
    int prioridade; 
} Item;

typedef enum {
    NOME,
    TIPO,
    PRIORIDADE
} CriterioOrdenacao;

Item mochila[MAX_ITENS];
int numItens = 0;

bool estaOrdenadoPorNome = false;

// --- ProtÃ³tipos de FunÃ§Ãµes ---
void limparTela();
void pausar();
void adicionarItem();
void listarItens();
void menuOrdenacao();
void insertionSort(CriterioOrdenacao criterio);
void buscarItemBinaria();
void limparBufferEntrada();

int main() {
    int opcao;

    do {
        limparTela();
        printf("--- Mochila (Nivel Mestre) ---\n");
        printf("Itens na mochila: %d/%d\n", numItens, MAX_ITENS);
        printf("Ordenada por nome: %s\n", estaOrdenadoPorNome ? "Sim" : "Nao");
        printf("--------------------------------\n");
        printf("1. Adicionar Item\n");
        printf("2. Listar Itens\n");
        printf("3. Ordenar Mochila\n");
        printf("4. Buscar Item (Busca Binaria por Nome)\n");
        printf("0. Sair\n");
        printf("\nEscolha uma opcao: ");

        scanf("%d", &opcao);
        limparBufferEntrada(); 

        switch (opcao) {
            case 1:
                adicionarItem();
                break;
            case 2:
                listarItens();
                break;
            case 3:
                menuOrdenacao();
                break;
            case 4:
                buscarItemBinaria();
                break;
            case 0:
                printf("Saindo do jogo...\n");
                break;
            default:
                printf("Opcao invalida. Tente novamente.\n");
        }

        if (opcao != 0) {
            pausar();
        }

    } while (opcao != 0);

    return 0;
}

void limparBufferEntrada() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void limparTela() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

void pausar() {
    printf("\nPressione Enter para continuar...");
    getchar(); 
}

void adicionarItem() {
    if (numItens >= MAX_ITENS) {
        printf("Mochila cheia! Nao e possivel adicionar mais itens.\n");
        return;
    }

    Item novoItem;

    printf("--- Adicionar Novo Item ---\n");
    printf("Nome: ");
    scanf(" %[^\n]", novoItem.nome); 
    limparBufferEntrada();

    printf("Tipo: ");
    scanf(" %[^\n]", novoItem.tipo);
    limparBufferEntrada();

    printf("Quantidade: ");
    scanf("%d", &novoItem.quantidade);
    limparBufferEntrada();

    do {
        printf("Prioridade (1=Max, 5=Min): ");
        scanf("%d", &novoItem.prioridade);
        limparBufferEntrada();
        if (novoItem.prioridade < 1 || novoItem.prioridade > 5) {
            printf("Prioridade invalida. Deve ser entre 1 e 5.\n");
        }
    } while (novoItem.prioridade < 1 || novoItem.prioridade > 5);

    mochila[numItens] = novoItem;
    numItens++;
    estaOrdenadoPorNome = false;

    printf("Item '%s' adicionado com sucesso!\n", novoItem.nome);
}

void listarItens() {
    limparTela();
    printf("--- Itens na Mochila (%d/%d) ---\n", numItens, MAX_ITENS);

    if (numItens == 0) {
        printf("Mochila vazia.\n");
        return;
    }

    printf("| %-20s | %-15s | %-10s | %-10s |\n", "Nome", "Tipo", "Qtd.", "Prioridade");
    printf("|----------------------|-----------------|------------|------------|\n");

    for (int i = 0; i < numItens; i++) {
        printf("| %-20s | %-15s | %-10d | %-10d |\n",
               mochila[i].nome,
               mochila[i].tipo,
               mochila[i].quantidade,
               mochila[i].prioridade);
    }
    printf("-------------------------------------------------------------------\n");
}

void menuOrdenacao() {
    int escolha;
    
    if (numItens < 2) {
        printf("Nao ha itens suficientes para ordenar.\n");
        return;
    }

    printf("--- Ordenar Mochila ---\n");
    printf("Escolha o criterio de ordenacao:\n");
    printf("1. Nome (A-Z)\n");
    printf("2. Tipo (A-Z)\n");
    printf("3. Prioridade (1-5)\n");
    printf("0. Voltar\n");
    printf("Opcao: ");

    scanf("%d", &escolha);
    limparBufferEntrada();

    switch (escolha) {
        case 1:
            printf("Ordenando por Nome...\n");
            insertionSort(NOME);
            break;
        case 2:
            printf("Ordenando por Tipo...\n");
            insertionSort(TIPO);
            break;
        case 3:
            printf("Ordenando por Prioridade...\n");
            insertionSort(PRIORIDADE);
            break;
        case 0:
            return;
        default:
            printf("Opcao invalida.\n");
    }
}

void insertionSort(CriterioOrdenacao criterio) {
    int i, j;
    Item chave;
    long long comparacoes = 0;

    for (i = 1; i < numItens; i++) {
        chave = mochila[i];
        j = i - 1;

        bool deveTrocar = false;

        while (j >= 0) {
            comparacoes++; 
            deveTrocar = false;

            switch (criterio) {
                case NOME:
                    if (strcmp(mochila[j].nome, chave.nome) > 0) {
                        deveTrocar = true;
                    }
                    break;
                case TIPO:
                    if (strcmp(mochila[j].tipo, chave.tipo) > 0) {
                        deveTrocar = true;
                    }
                    break;
                case PRIORIDADE:
                    if (mochila[j].prioridade > chave.prioridade) { 
                        deveTrocar = true;
                    }
                    break;
            }

            if (deveTrocar) {
                mochila[j + 1] = mochila[j];
                j--;
            } else {
                break;
            }
        }
        mochila[j + 1] = chave;
    }

    printf("\nOrdenacao concluida com %lld comparacoes.\n", comparacoes);

    // ðŸ’¡ Atualiza o estado da mochila
    if (criterio == NOME) {
        estaOrdenadoPorNome = true;
    } else {
        estaOrdenadoPorNome = false;
    }
}

void buscarItemBinaria() {
    if (!estaOrdenadoPorNome) {
        printf("\n[ERRO] A busca binaria so funciona se a mochila estiver ordenada por NOME.\n");
        printf("Por favor, use a Opcao 3 (Ordenar) e escolha 'Nome' primeiro.\n");
        return;
    }
    
    if (numItens == 0) {
        printf("Mochila vazia. Nao ha o que buscar.\n");
        return;
    }

    char nomeBusca[MAX_NOME];
    printf("Digite o nome do item a buscar: ");
    scanf(" %[^\n]", nomeBusca);
    limparBufferEntrada();

    int esquerda = 0;
    int direita = numItens - 1;
    int meio;
    bool encontrado = false;

    printf("Iniciando busca binaria por '%s'...\n", nomeBusca);

    while (esquerda <= direita) {
        meio = esquerda + (direita - esquerda) / 2; 

        int cmp = strcmp(mochila[meio].nome, nomeBusca);

        if (cmp == 0) {
            // Encontrou!
            printf("\n--- Item Encontrado! ---\n");
            printf("Nome: %s\n", mochila[meio].nome);
            printf("Tipo: %s\n", mochila[meio].tipo);
            printf("Qtd: %d\n", mochila[meio].quantidade);
            printf("Prioridade: %d\n", mochila[meio].prioridade);
            printf("Posicao na mochila (indice): %d\n", meio);
            printf("--------------------------\n");
            encontrado = true;
            break;
        } else if (cmp < 0) {
            esquerda = meio + 1;
        } else {  
            direita = meio - 1;
        }
    }
    if (!encontrado) {
        printf("\nItem '%s' nao encontrado na mochila.\n", nomeBusca);
    }
